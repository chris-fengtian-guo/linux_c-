#include <iostream>
#include <thread>
#include <event2/event.h>
#include <event2/buffer.h>
#include <event2/util.h>
#include <unistd.h>

static void receiver_cb(evutil_socket_t fd, short what, void *arg) {
    struct event_base *base = (struct event_base *)arg;
    char buf[256];
    int len = read(fd, buf, sizeof(buf) - 1);
    if (len > 0) {
        buf[len] = '\0';
        std::cout << "Received: " << buf << std::endl;
        if (strcmp(buf, "exit\n") == 0) {
            event_base_loopbreak(base);
        }
    }
}

void receiver() {
    struct event_base *base = event_base_new();
    struct event *ev = event_new(base, STDIN_FILENO, EV_READ | EV_PERSIST, receiver_cb, base);
    event_add(ev, NULL);
    event_base_dispatch(base);
    event_free(ev);
    event_base_free(base);
}

void sender() {
    for (int i = 0; i < 5; ++i) {
        std::cout << "Sending message " << i << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
    std::cout << "Type 'exit' to stop the receiver thread." << std::endl;
}

int main() {
    std::thread t1(receiver);
    std::thread t2(sender);

    t2.join();
    t1.join();

    return 0;
}
