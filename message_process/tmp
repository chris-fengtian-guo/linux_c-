#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <vector> // 添加vector头文件

// 定义命令信息数据结构
struct Command {
    std::string action; // 动作
    unsigned int behaviorTreeID; // 行为树ID，改为无符号整数类型
};

// 行为树路径数组
const std::vector<std::string> behaviorTreePaths = {
    "/root/autodl-tmp/linux_c++/message_process/behavior_tree_style1",
    "/root/autodl-tmp/linux_c++/message_process/behavior_tree_style2"
};

// 根据命令信息执行相应的行为树，并返回执行的行为树路径
std::string executeBehaviorTree(const Command& command) {
    if (command.behaviorTreeID < behaviorTreePaths.size()) {
        const std::string& behaviorTreePath = behaviorTreePaths[command.behaviorTreeID];
        // 这里执行行为树程序，您可以使用之前提供的函数来执行二进制程序
        std::cout << "Executing behavior tree at path: " << behaviorTreePath << std::endl;
        return behaviorTreePath;
    } else {
        std::cerr << "Invalid behavior tree ID: " << command.behaviorTreeID << std::endl;
        return ""; // 返回空字符串表示未找到匹配的行为树
    }
}

int main() {
    // 假设接收到的消息内容包含动作和行为树ID
    std::string action = "run";
    unsigned int behaviorTreeID = 0; // 假设行为树ID为0

    // 构造命令信息
    Command cmd;
    cmd.action = action;
    cmd.behaviorTreeID = behaviorTreeID;

    // 执行相应的行为树，并获取执行的行为树路径
    std::string binary1Path = executeBehaviorTree(cmd); // 将binary1Path改为std::string类型

    std::cout << "Executed behavior tree path: " << binary1Path << std::endl;

    return 0;
}
